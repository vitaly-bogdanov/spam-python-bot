from aiogram.dispatcher import FSMContext
import re
from bot.base.objects import dispatcher, userbot
from aiogram import types

from bot.base.states import AccountRegister
from bot.models.account import Account


@dispatcher.message_handler(content_types=types.ContentTypes.TEXT, state=AccountRegister.register_phone_number)
async def process_phone_number(message: types.Message, state: FSMContext):
    phone_number = message.text
    if not re.findall(r'^\+\d+$', phone_number):
        await message.answer('–ù–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ –≤–µ—Å—Ç–∏ –ø–æ –ø—Ä–∏–º–µ—Ä—É: +73243214243')
        await state.set_state(AccountRegister.register_phone_number)
        return

    account = Account()
    if account.is_exists(phone_number=phone_number):
        await message.answer('–ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
        await state.set_state(AccountRegister.register_phone_number)
        return

    userbot.add_phone_number(phone_number)
    await state.update_data({'phone_number': phone_number})

    await message.answer('–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –Ω–∞ https://my.telegram.org/apps –ø–æ–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º, —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ '
                         '–∏ –≤–æ–∑—å–º–∏—Ç–µ –æ—Ç—Ç—É–¥–∞ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∑–∞–ø—Ä–æ—à–µ–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–∞—Ö.')
    await message.answer('–í–≤–µ–¥–∏—Ç–µ api_id')
    await AccountRegister.register_api_id.set()


@dispatcher.message_handler(content_types=types.ContentTypes.TEXT, state=AccountRegister.register_api_id)
async def process_api_id(message: types.Message, state: FSMContext):
    api_id = message.text
    if not api_id.isdigit():
        await message.answer('api_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
        await state.set_state(AccountRegister.register_api_id)
        return

    userbot.add_api_id(api_id)
    await state.update_data({'api_id': api_id})

    await message.answer('–í–≤–µ–¥–∏—Ç–µ api_hash')
    await AccountRegister.register_api_hash.set()


@dispatcher.message_handler(content_types=types.ContentTypes.TEXT, state=AccountRegister.register_api_hash)
async def process_api_hash(message: types.Message, state: FSMContext):
    api_hash = message.text

    userbot.add_api_hash(api_hash)
    await state.update_data({'api_hash': api_hash})

    status = await userbot.send_code_request()
    if status.get('error'):
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º —Ç–µ–ª–µ–≥—Ä–∞–º‚úâÔ∏è')
        await state.set_state(AccountRegister.register_phone_number)
        await message.answer(f'–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {status.get("seconds")} —Å–µ–∫—É–Ω–¥. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')
        return

    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º —Ç–µ–ª–µ–≥—Ä–∞–º‚úâÔ∏è')
    await AccountRegister.register_security_code.set()


@dispatcher.message_handler(content_types=types.ContentTypes.TEXT, state=AccountRegister.register_security_code)
async def process_security_number(message: types.Message, state: FSMContext):
    code = message.text
    if not re.findall(r'^\d{5}$', code):
        await message.answer('–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ 5 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
        await state.set_state(AccountRegister.register_security_code)
        return

    await userbot.sign_in(code)
    await state.update_data({'security_code': code})
    await process_finish_register(message, state)


async def process_finish_register(message: types.Message, state: FSMContext):
    account_state = await state.get_data()

    phone_number = account_state.get('phone_number')
    account_type = account_state.get('type')
    api_id = account_state.get('api_id')
    api_hash = account_state.get('api_hash')

    account = Account(account_type)
    account.create(
        phone_number=phone_number,
        account_type=account_type,
        api_id=api_id,
        api_hash=api_hash,
        session_path=userbot.get_session_path()
    )

    user_info = await userbot.get_me()

    full_name = f'{user_info.first_name} {user_info.last_name}'
    account.update_info(full_name=full_name, username=user_info.username)

    await message.answer(f'–ì–æ—Ç–æ–≤–æ! {account_state.get("alias")}-–∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ωüëç')
    await message.answer(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:\n'
                         f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n'
                         f'–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info.username or "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"}\n'
                         f'–§–ò–û: {full_name}\n'
                         f'–¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞: {account_state.get("alias")}\n')

    async with state.proxy() as data:
        data.pop('phone_number')
        data.pop('api_id')
        data.pop('api_hash')
        data.pop('session_path')